"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const open_1 = __importDefault(require("open"));
const config_2 = require("../config");
/**
 * It takes a contract's ABI and sends it to the backend, which returns a public URL. Then generates a
 * new URL to interact with smart contracts through Laika
 * @param {HardhatRuntimeEnvironment} hre - HardhatRuntimeEnvironment
 * @param {string} contract - The name of the contract you want to sync.
 * @param {string} contractAddress - The Address of that specific contract.
 */
const laikaSync = async (hre, contract, contractAddress) => {
    const { abi } = await hre.artifacts.readArtifact(contract);
    console.log(`Syncing the ABI of ${contract} contract...`);
    const { default: fetch } = await Promise.resolve().then(() => __importStar(require("node-fetch")));
    const response = await fetch(`${config_2.endpointUrls.services}/abi-storages`, {
        method: "POST",
        body: JSON.stringify({ abi, contractAddress }),
        headers: { "Content-Type": "application/json" },
    });
    const publicUrl = await response.text();
    const endpoint = `${config_2.endpointUrls.interface}/evm/collections/import/${publicUrl.split("/")[4].split(".")[0]}`;
    console.log(`Check out your request at ${endpoint}`);
    open_1.default(endpoint);
};
config_1.task("laika-sync", "Sync your ABIs with Laika")
    .addParam("contract", "Contract name to sync")
    .addOptionalParam("address", "Address of that specific contract", "", config_1.types.string)
    .setAction(async (taskArgs, hre) => {
    const { contract, address: contractAddress } = taskArgs;
    await laikaSync(hre, contract, contractAddress);
});
exports.default = laikaSync;
//# sourceMappingURL=laika-sync.js.map